############################
#
# Domestication Events
#
# Written by Colleen Arkadija
#
############################

namespace = domestication

## Add Haustoric Implant trait to floret pops - triggered on monthly pulse
country_event = {
	id = domestication.1
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		is_domesticator = yes
		has_technology = tech_haustoric_implant
		any_owned_planet = {
			exists = owner
			num_assigned_jobs = { 
				job = floret
				value >= 1
			}
		}
	}
	
	immediate = {
		every_owned_pop = {
			limit = {
				has_job = floret
				NOT = {
					pop_has_trait = trait_haustoric_implant
				}
			}
			modify_species = {
				species = this
				add_trait = trait_haustoric_implant
				add_traits_at_start_of_list = yes
				
				effect = {
					set_citizenship_type = {
						country = root
						type = citizenship_limited
						cooldown = no
					}
					set_living_standard = {
						country = root
						type = living_standard_chemical_bliss
						cooldown = no
					}
					set_military_service_type = {
						country = root
						type = military_service_none
						cooldown = no
					}
					set_population_controls = {
						country = root
						type = yes
						cooldown = no
					}
					set_colonization_controls = {
						country = root
						type = yes
						cooldown = no
					}
				}
			}
		}
	}
}

## Inform player about Haustoric Implant
country_event = {
	id = domestication.2
	title = domestication.2.name
	desc =  domestication.2.desc
	picture = GFX_evt_society_research
	fire_only_once = yes
	
	is_triggered_only = yes
	hide_window = no
	
	trigger = {
		is_domesticator = yes
		has_technology = tech_haustoric_implant
	}
	
	option = {
		name = domestication.2.a
		trigger = {
			always = yes
		}
	}
}

## Creation of a Domesticated Protectorate
## mass population swaps between subject and overlord
## this/root = subject, from = overlord
country_event = {
	id = domestication.3
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		from = {
			has_valid_civic = civic_domesticators
		}
		this = {
			NOT = { has_country_flag = flag_domesticated_protectorate }
		}
	}

	immediate = {
		from = {
			save_event_target_as = domesticator_overlord
			species = {
				save_event_target_as = overlord_species
			}
		}
		this = {
			save_event_target_as = domesticated_regime
		}
		
		every_owned_planet = {
			limit = { always = yes }
			planet_event = {
				id = domestication.5
				scopes = { from = event_target:domesticator_overlord }
			}
		}
		
		
		copy_ethos_and_authority = from
		
		change_government = {
		#	authority = auth_oligarchic
			civics = { civic = civic_domesticators civic = random }
		#	#cooldown = no (default: yes)
		#	#remove_invalid_civics = yes (default: no)
		}
		set_name = random
		change_dominant_species = { species = event_target:overlord_species }
		
		#force_add_civic = civic_domesticators
		
		set_graphical_culture = event_target:domesticator_overlord
		set_city_graphical_culture = event_target:domesticator_overlord
		
		change_country_flag = random
		
	}
}

planet_event = {
	id = domestication.5
	hide_window = yes

	is_triggered_only = yes
	
	trigger = {
		# if less than 2 affini pops on planet
		count_owned_pop = {
			limit = {
				is_same_species = from.owner_species
			}
			count < 2
		}
	}
	
	# this/root = planet
	# from = affini compact
	
	immediate = {
		#this.country.overlord = {
		#	save_event_target_as = overlord_empire
		#}
		
		from = {
			owner_species = {
				save_event_target_as = overlord_species
			}
		}
		
		from = {
			random_owned_planet = {
				limit = {
					count_owned_pop = {
						limit = {
							is_same_species = event_target:overlord_species
							can_live_on_planet = root
							OR = {
								is_pop_category = worker
								AND = {
									is_pop_category = specialist
									NOT = { has_job = colonist }
								}
							}
							
						}
						count > 2
					}
				}
				save_event_target_as = overlord_planet
				while = {
					count = 2
					random_owned_pop = {
						limit = {
							is_same_species = event_target:overlord_species
							can_live_on_planet = root
							OR = {
								is_pop_category = worker
								AND = {
									is_pop_category = specialist
									NOT = { has_job = colonist }
								}
							}
						}
						resettle_pop = {
							pop = this
							planet = root
						}
					}
				}
				
				root = {
					while = {
						count = 2
						random_owned_pop = {
							limit = {
								NOT = { is_same_species = event_target:overlord_species }
								can_live_on_planet = event_target:overlord_planet
							}
							resettle_pop = {
								pop = this
								planet = event_target:overlord_planet
							}
						}
					}
				}
			}
		}
	}
}

## Government changes for new Domesticated Protectorate
## this/root = subject, from = overlord
country_event = {
	id = domestication.4
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		from = {
			has_valid_civic = civic_domesticators
		}
		this = {
			NOT = { has_country_flag = flag_domesticated_protectorate }
		}
	}

	immediate = {
		from = {
			save_event_target_as = domesticator_overlord
		}
		this = {
			save_event_target_as = domesticated_regime
		}
		
		if = {
			limit = {
				NOT = {
					any_country = {
						
					}
				}
			}
			create_country = {
				name = format.domesticated.1
				species = event_target:domesticator_overlord
				ignore_initial_colony_error = yes
				type = default
				name_list = PLANT5
				civics = {
					civic = civic_domesticators
					civic = random
				}
				flag = random
				authority = auth_oligarchic
				ethos = { ethic = ethic_fanatic_xenophile ethic = ethic_militarist }
				effect = { 
					log_error = "Starting country effects"
					copy_ethos_and_authority = fromfrom
					save_event_target_as = new_domesticated_protectorate
					
					copy_techs_from = {
						target = event_target:domesticator_overlord
						except = {
							# Horizon Signal
							tech_akx_worm_1
							tech_akx_worm_2
							tech_akx_worm_3
						}
					}
					#establish_contact = { who = event_target:domesticator_overlord }
					establish_communications_no_message = event_target:domesticator_overlord
					log_error = "Comms established"
				}
			}
		}
	
		
		
		every_system = {
			limit = {
				exists = owner
				is_owned_by = event_target:domesticated_regime
			}
			starbase = {
				set_owner = event_target:new_domesticated_protectorate
			}
			every_system_planet = {
				limit = {
					AND = {
						exists = owner
						owner = {
							is_same_value = event_target:domesticated_regime
						}
					}
					NOR = {
						has_orbital_bombardment = yes
						has_ground_combat = yes
						is_planet_class = "pc_broken"
					}
				}
				set_owner = event_target:new_domesticated_protectorate
				remove_all_armies = yes
				validate_planet_buildings_and_districts = yes
			}
		}
		
		ordered_owned_planet = {
			limit = { 
				exists = owner
				is_owned_by = event_target:new_domesticated_protectorate 
			}
			position = 0
			order_by = trigger:num_pops
			set_capital = yes
		}
		
		##Destroy old country
		event_target:domesticated_regime = {
			every_owned_pop = { #In case any pops are left behind
				kill_pop = yes
			}
			destroy_country = yes
		}
		
		
		

		#So we don't get "orphaned" pops with no job categories in case of non-Ketling system owners
		#every_system = {
		#	limit = {
		#		OR = {
		#			NOT = { exists = owner }
		#			AND = {
		#				exists = owner
		#				NOT = {
		#					owner = { is_same_value = event_target:ratling_country }
		#				}
		#			}
		#		}
		#	}
		#	every_system_planet = {
		#		limit = {
		#			has_planet_flag = ratling_planet
		#			any_owned_pop = {
		#				is_same_species = event_target:ratling_species
		#				NOT = { exists = owner }
		#			}
		#		}
		#		every_owned_pop = {
		#			limit = {
		#				is_same_species = event_target:ratling_species
		#				NOT = { exists = owner }
		#			}
		#			kill_pop = yes
		#		}
		#	}
		#}

		#Create a Capital
		#IF = { #If the old capital belongs to Ratlings, use it
		#	limit = {
		#		exists = event_target:ratling_capital
		#		event_target:ratling_capital = {
		#			exists = owner
		#			owner = {
		#				is_same_value = event_target:ratling_country
		#			}
		#		}
		#	}
		#	event_target:ratling_capital = {
		#		set_capital = yes
		#	}
		#}
		#ELSE = { #Otherwise, make a new Capital
			random_system = {
				limit = { 
					
				}
				random_system_planet = {
					limit = {
						#has_planet_flag = ratling_planet
						exists = owner
						owner = {
							is_same_value = event_target:new_domesticated_protectorate
						}
						planet_size > 12
						NOT = { is_planet_class = "pc_broken" }
					}
					#save_global_event_target_as = ratling_capital
					set_capital = yes
				}
			}
		#}
		


		event_target:new_domesticated_protectorate = {

			##Add resources
			add_resource = { minerals = 7000 }
			add_resource = { energy = 7000 }
			add_resource = { food = 3000 }
			add_resource = { consumer_goods = 3000 }
			add_resource = { alloys = 2000 }
			add_resource = { influence = 1000 }
			add_resource = { unity = 27000 }

			event_target:new_domesticated_protectorate = {
				##Create Mining Stations
				every_planet_within_border = {
					limit = {
						has_deposit_for = shipclass_mining_station
					}
					create_mining_station = { owner = event_target:new_domesticated_protectorate }
				}
				create_fleet = {
					effect = {
						set_owner = event_target:new_domesticated_protectorate
						create_ship = {
							name = random
							random_existing_design = constructor
							graphical_culture = "reptilian_01"
						}
						set_location = {
							target = event_target:new_domesticated_protectorate
							distance = 10
							angle = random
						}
					}
				}
				create_fleet = {
					effect = {
						set_owner = event_target:new_domesticated_protectorate
						create_ship = {
							name = random
							random_existing_design = science
							graphical_culture = "reptilian_01"
						}
						set_location = {
							target = event_target:new_domesticated_protectorate
							distance = 10
							angle = random
						}
					}
				}
			}

			##Add leaders
			while = {
				count = 4
				create_leader = {
					class = scientist
					species = event_target:new_domesticated_protectorate
					name = random
					skill = 3
				}
			}
			while = {
				count = 1
				create_leader = {
					class = admiral
					species = event_target:new_domesticated_protectorate
					name = random
					skill = 3
				}
			}
			create_leader = {
				class = governor
				species = event_target:new_domesticated_protectorate
				name = random
				skill = 3
			}
			
			
			
			set_country_flag = flag_domesticated_protectorate
		}

		## set primary species
		#change_dominant_species = { 
		#	species = from
		#}
		## Set ethics to match
		
		## set civics to match
		
		last_created_country = {
			log_error = "About to vassalize"
			set_subject_of = { 
				who = event_target:domesticator_overlord 
				subject_type = vassal 
			}
			log_error = "Vassalized"
		}
	}
}